Overview
=================================


If you have completed the steps in the *Get started* section the result should be a running kervi application.
The application has a system dashboard that shows sensors messauring cpu, memory and disk use and a power controller.

Kervi app anatomy
---------------------------------

The application is structured in several files with the following layout

.. code::

    app root
    |
    |- cams
        |- __init__
        |- cam1.py
    |- controllers 
        |- __init__.py
        |- my_controller.py
        |- system_controller.py
    |- dashboards
        |- __init__.py
    |- sensors
        |- __init__.py
        |- my_sensor.py
        |- system_sensor.py
    |- myapp.py

The kervi application is bootstrapped in myapp.py

.. code:: python
    
    from kervi.bootstrap import Application
    import kervi.utility.nethelper as nethelper

    if __name__ == '__main__':
        APP = Application({
            "info":{
                "id":"myapp",
                "name":"My app",
                "appKey":"",
            },
            "network":{
                "IPAddress": nethelper.get_ip_address(),
                "IPCBasePort":9500,
                "WebSocketPort":9000,
                "WebPort": 8080,
                "IPCSecret":b"a5fa439d-c285-49c1-a39a-af98babd2cbc"
            },
        })

        APP.run()

The values for ports and secrets are generated by the Kervi commandline tool.
When the Application.run is called the system looks for Kervi components in cam, controllers, dashboard and sensor folders.
In each folder the __init__.py bootstraps and load the components that resides in the local folder.

Dashboards
------------------------

The __init__.py in the dashboards folder contains the code that defines dashboards.

.. code:: python

    from kervi.dashboard import Dashboard, Camboard, DashboardSection

    #Create the dashboards for your Kervi application here.

    #A camboard is a special dashbord where the background is a video feed.
    #is_default signals that this dashbord is shown first when ui starts.
    #cam1 is the id of the camera that should be used as video source.
    MAIN = Camboard("cam", "Main", "cam1", is_default=True)
    MAIN.add_section(DashboardSection("section1"))

    #Standard dashboard with several sections where sensors are placed.
    #Each sensor create links to one or more dashboard sections 
    SYSTEM = Dashboard("system", "System")
    SYSTEM.add_section(DashboardSection("cpu", columns=2, rows=2, collapsed=True))
    SYSTEM.add_section(DashboardSection("memory", columns=2, rows=2, collapsed=True))
    SYSTEM.add_section(DashboardSection("log", columns=2, rows=2, title="Log", user_log=True))
    SYSTEM.add_section(DashboardSection("disk", columns=1, rows=1))
    SYSTEM.add_section(DashboardSection("power", columns=1, rows=1, title="Power"))

In the example above two dashboards are defined CAM and SYSTEM. Each dashboard has one or more sections where kervi components like sensors and controllers are linked to.

Link components to dashboards
-----------------------------

In the sensors folder a dummy sensor my_sensor.py looks like this:

.. code:: python
   
   from kervi.sensor import Sensor, SensorThread

   class MySensor(Sensor):
        """ My sensor """
        def __init__(self):
            Sensor.__init__(self, "mySensor", "My sensor")
            self.type = "temp"
            self.max = 100
            self.min = 0
            self.unit = "C"

            #link the sensor to a dashboard section
            self.link_to_dashboard("cam", "section1", type="radial_gauge")

            #variables needed for my sensor
            self.counter = 0 #dummy counter
            self.counter_delta = 1

        def read_sensor(self):
            #read_sensor is called by the SensorThread
            #snippet below is just dummy code
            #enter your real code here to read your sensor

            self.counter += self.counter_delta

            if self.counter > self.max:
                self.counter_delta = -1
            elif self.counter <= self.min:
                self.counter_delta = 1

            #call new_sensor_reading to signal a new value
            self.new_sensor_reading(self.counter)

    #Add sensor to a SensorThread that polls the sensor by the specified interval 
    MY_SENSOR_THREAD = SensorThread(MySensor(),1)


The main method to present Kervi components on dashboards is by call link_to_dashboard on a Kervi component. 
In the snippet above the sensor is linked to the dashboard section *section1* on the dashboard with id *cam* and presented as a radial gauge.